//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.25 at 10:41:12 PM GMT
//

package net.wicast.config;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Name"/&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Class"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "name",
        "clazz"
})
@XmlRootElement(name = "Tool")
public class Tool implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2 {

    @XmlElement(name = "Name", required = true)
    protected String name;
    @XmlElement(name = "Class", required = true)
    protected String clazz;

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#append(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#appendFields(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theName;
            theName = getName();
            strategy.appendField(locator, this, "name", buffer, theName, name != null);
        }
        {
            String theClazz;
            theClazz = getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz, clazz != null);
        }
        return buffer;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    @Override
    public Object clone() {
        return copyTo(createNewInstance());
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(java.lang.Object)
     */
    @Override
    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.CopyStrategy2)
     */
    @Override
    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = target == null ? createNewInstance() : target;
        if (draftCopy instanceof Tool) {
            final Tool copy = (Tool) draftCopy;
            {
                final Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, name != null);
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceName;
                    sourceName = getName();
                    final String copyName = (String) strategy.copy(LocatorUtils.property(locator, "name", sourceName),
                            sourceName,
                            name != null);
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                final Boolean clazzShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, clazz != null);
                if (clazzShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceClazz;
                    sourceClazz = getClazz();
                    final String copyClazz = (String) strategy.copy(
                            LocatorUtils.property(locator, "clazz", sourceClazz),
                            sourceClazz,
                            clazz != null);
                    copy.setClazz(copyClazz);
                } else {
                    if (clazzShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.clazz = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#createNewInstance()
     */
    @Override
    public Object createNewInstance() {
        return new Tool();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.Equals2#equals(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.EqualsStrategy2)
     */
    @Override
    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
            EqualsStrategy2 strategy) {
        if (object == null || this.getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Tool that = (Tool) object;
        {
            String lhsName;
            lhsName = getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName),
                    LocatorUtils.property(thatLocator, "name", rhsName),
                    lhsName,
                    rhsName,
                    name != null,
                    that.name != null)) {
                return false;
            }
        }
        {
            String lhsClazz;
            lhsClazz = getClazz();
            String rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz),
                    LocatorUtils.property(thatLocator, "clazz", rhsClazz),
                    lhsClazz,
                    rhsClazz,
                    clazz != null,
                    that.clazz != null)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Gets the value of the clazz property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Gets the value of the name property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getName() {
        return name;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.HashCode2#hashCode(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.lang.HashCodeStrategy2)
     */
    @Override
    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theName;
            theName = getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName),
                    currentHashCode,
                    theName,
                    name != null);
        }
        {
            String theClazz;
            theClazz = getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz),
                    currentHashCode,
                    theClazz,
                    clazz != null);
        }
        return currentHashCode;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(java.lang.Object, java.lang.Object)
     */
    @Override
    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, java.lang.Object, org.jvnet.jaxb2_commons.lang.MergeStrategy2)
     */
    @Override
    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right,
            MergeStrategy2 strategy) {
        if (right instanceof Tool) {
            final Tool target = this;
            final Tool leftObject = (Tool) left;
            final Tool rightObject = (Tool) right;
            {
                final Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.name != null,
                        rightObject.name != null);
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsName;
                    lhsName = leftObject.getName();
                    String rhsName;
                    rhsName = rightObject.getName();
                    final String mergedName = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "name", lhsName),
                            LocatorUtils.property(rightLocator, "name", rhsName),
                            lhsName,
                            rhsName,
                            leftObject.name != null,
                            rightObject.name != null);
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                final Boolean clazzShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.clazz != null,
                        rightObject.clazz != null);
                if (clazzShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsClazz;
                    lhsClazz = leftObject.getClazz();
                    String rhsClazz;
                    rhsClazz = rightObject.getClazz();
                    final String mergedClazz = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "clazz", lhsClazz),
                            LocatorUtils.property(rightLocator, "clazz", rhsClazz),
                            lhsClazz,
                            rhsClazz,
                            leftObject.clazz != null,
                            rightObject.clazz != null);
                    target.setClazz(mergedClazz);
                } else {
                    if (clazzShouldBeMergedAndSet == Boolean.FALSE) {
                        target.clazz = null;
                    }
                }
            }
        }
    }

    /**
     * Sets the value of the clazz property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setClazz(String value) {
        clazz = value;
    }

    /**
     * Sets the value of the name property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setName(String value) {
        name = value;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

}
