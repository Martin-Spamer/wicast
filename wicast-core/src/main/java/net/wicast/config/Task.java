//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.25 at 10:41:12 PM GMT
//

package net.wicast.config;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Channel"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "channel"
})
@XmlRootElement(name = "Task")
public class Task implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2 {

    @XmlElement(name = "Channel")
    protected List<Channel> channel;

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#append(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#appendFields(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<Channel> theChannel;
            theChannel = channel != null && !channel.isEmpty() ? getChannel() : null;
            strategy.appendField(locator,
                    this,
                    "channel",
                    buffer,
                    theChannel,
                    channel != null && !channel.isEmpty());
        }
        return buffer;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    @Override
    public Object clone() {
        return copyTo(createNewInstance());
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(java.lang.Object)
     */
    @Override
    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.CopyStrategy2)
     */
    @Override
    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = target == null ? createNewInstance() : target;
        if (draftCopy instanceof Task) {
            final Task copy = (Task) draftCopy;
            {
                final Boolean channelShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator,
                        channel != null && !channel.isEmpty());
                if (channelShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<Channel> sourceChannel;
                    sourceChannel = channel != null && !channel.isEmpty() ? getChannel() : null;
                    @SuppressWarnings("unchecked")
                    final List<Channel> copyChannel = (List<Channel>) strategy.copy(
                            LocatorUtils.property(locator, "channel", sourceChannel),
                            sourceChannel,
                            channel != null && !channel.isEmpty());
                    copy.channel = null;
                    if (copyChannel != null) {
                        final List<Channel> uniqueChannell = copy.getChannel();
                        uniqueChannell.addAll(copyChannel);
                    }
                } else {
                    if (channelShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.channel = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#createNewInstance()
     */
    @Override
    public Object createNewInstance() {
        return new Task();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.Equals2#equals(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.EqualsStrategy2)
     */
    @Override
    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
            EqualsStrategy2 strategy) {
        if (object == null || this.getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Task that = (Task) object;
        {
            List<Channel> lhsChannel;
            lhsChannel = channel != null && !channel.isEmpty() ? getChannel() : null;
            List<Channel> rhsChannel;
            rhsChannel = that.channel != null && !that.channel.isEmpty() ? that.getChannel() : null;
            if (!strategy.equals(LocatorUtils.property(thisLocator, "channel", lhsChannel),
                    LocatorUtils.property(thatLocator, "channel", rhsChannel),
                    lhsChannel,
                    rhsChannel,
                    channel != null && !channel.isEmpty(),
                    that.channel != null && !that.channel.isEmpty())) {
                return false;
            }
        }
        return true;
    }

    /**
     * Gets the value of the channel property.
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the channel
     * property.
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     * getChannel().add(newItem);
     * </pre>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Channel }
     * @return the channel
     */
    public List<Channel> getChannel() {
        if (channel == null) {
            channel = new ArrayList<>();
        }
        return channel;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.HashCode2#hashCode(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.lang.HashCodeStrategy2)
     */
    @Override
    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<Channel> theChannel;
            theChannel = channel != null && !channel.isEmpty() ? getChannel() : null;
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "channel", theChannel),
                    currentHashCode,
                    theChannel,
                    channel != null && !channel.isEmpty());
        }
        return currentHashCode;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(java.lang.Object, java.lang.Object)
     */
    @Override
    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, java.lang.Object, org.jvnet.jaxb2_commons.lang.MergeStrategy2)
     */
    @Override
    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right,
            MergeStrategy2 strategy) {
        if (right instanceof Task) {
            final Task target = this;
            final Task leftObject = (Task) left;
            final Task rightObject = (Task) right;
            {
                final Boolean channelShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.channel != null && !leftObject.channel.isEmpty(),
                        rightObject.channel != null && !rightObject.channel.isEmpty());
                if (channelShouldBeMergedAndSet == Boolean.TRUE) {
                    List<Channel> lhsChannel;
                    lhsChannel = leftObject.channel != null && !leftObject.channel.isEmpty()
                            ? leftObject.getChannel() : null;
                    List<Channel> rhsChannel;
                    rhsChannel = rightObject.channel != null && !rightObject.channel.isEmpty()
                            ? rightObject.getChannel() : null;
                    final List<Channel> mergedChannel = (List<Channel>) strategy.merge(
                            LocatorUtils.property(leftLocator, "channel", lhsChannel),
                            LocatorUtils.property(rightLocator, "channel", rhsChannel),
                            lhsChannel,
                            rhsChannel,
                            leftObject.channel != null && !leftObject.channel.isEmpty(),
                            rightObject.channel != null && !rightObject.channel.isEmpty());
                    target.channel = null;
                    if (mergedChannel != null) {
                        final List<Channel> uniqueChannell = target.getChannel();
                        uniqueChannell.addAll(mergedChannel);
                    }
                } else {
                    if (channelShouldBeMergedAndSet == Boolean.FALSE) {
                        target.channel = null;
                    }
                }
            }
        }
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

}
