//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.25 at 10:41:12 PM GMT
//

package net.wicast.config;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Tool"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "tool"
})
@XmlRootElement(name = "Tools")
public class Tools implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2 {

    @XmlElement(name = "Tool", required = true)
    protected Tool tool;

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#append(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#appendFields(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Tool theTool;
            theTool = getTool();
            strategy.appendField(locator, this, "tool", buffer, theTool, tool != null);
        }
        return buffer;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    @Override
    public Object clone() {
        return copyTo(createNewInstance());
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(java.lang.Object)
     */
    @Override
    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.CopyStrategy2)
     */
    @Override
    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = target == null ? createNewInstance() : target;
        if (draftCopy instanceof Tools) {
            final Tools copy = (Tools) draftCopy;
            {
                final Boolean toolShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, tool != null);
                if (toolShouldBeCopiedAndSet == Boolean.TRUE) {
                    Tool sourceTool;
                    sourceTool = getTool();
                    final Tool copyTool = (Tool) strategy.copy(LocatorUtils.property(locator, "tool", sourceTool),
                            sourceTool,
                            tool != null);
                    copy.setTool(copyTool);
                } else {
                    if (toolShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.tool = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#createNewInstance()
     */
    @Override
    public Object createNewInstance() {
        return new Tools();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.Equals2#equals(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.EqualsStrategy2)
     */
    @Override
    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
            EqualsStrategy2 strategy) {
        if (object == null || this.getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Tools that = (Tools) object;
        {
            Tool lhsTool;
            lhsTool = getTool();
            Tool rhsTool;
            rhsTool = that.getTool();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tool", lhsTool),
                    LocatorUtils.property(thatLocator, "tool", rhsTool),
                    lhsTool,
                    rhsTool,
                    tool != null,
                    that.tool != null)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Gets the value of the tool property.
     *
     * @return
     *         possible object is
     *         {@link Tool }
     */
    public Tool getTool() {
        return tool;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.HashCode2#hashCode(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.lang.HashCodeStrategy2)
     */
    @Override
    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Tool theTool;
            theTool = getTool();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tool", theTool),
                    currentHashCode,
                    theTool,
                    tool != null);
        }
        return currentHashCode;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(java.lang.Object, java.lang.Object)
     */
    @Override
    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, java.lang.Object, org.jvnet.jaxb2_commons.lang.MergeStrategy2)
     */
    @Override
    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right,
            MergeStrategy2 strategy) {
        if (right instanceof Tools) {
            final Tools target = this;
            final Tools leftObject = (Tools) left;
            final Tools rightObject = (Tools) right;
            {
                final Boolean toolShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.tool != null,
                        rightObject.tool != null);
                if (toolShouldBeMergedAndSet == Boolean.TRUE) {
                    Tool lhsTool;
                    lhsTool = leftObject.getTool();
                    Tool rhsTool;
                    rhsTool = rightObject.getTool();
                    final Tool mergedTool = (Tool) strategy.merge(LocatorUtils.property(leftLocator, "tool", lhsTool),
                            LocatorUtils.property(rightLocator, "tool", rhsTool),
                            lhsTool,
                            rhsTool,
                            leftObject.tool != null,
                            rightObject.tool != null);
                    target.setTool(mergedTool);
                } else {
                    if (toolShouldBeMergedAndSet == Boolean.FALSE) {
                        target.tool = null;
                    }
                }
            }
        }
    }

    /**
     * Sets the value of the tool property.
     *
     * @param value
     *            allowed object is
     *            {@link Tool }
     */
    public void setTool(Tool value) {
        tool = value;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

}
