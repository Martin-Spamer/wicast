//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.25 at 10:41:12 PM GMT
//

package net.wicast.config;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Name"/&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Version"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Description"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Url"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Organization"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Licenses"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Properties"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Tools"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Client"/&gt;
 *           &lt;element ref="{http://xml.wicast.net/xml}Server"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "name",
        "version",
        "description",
        "url",
        "organization",
        "licenses",
        "properties",
        "tools",
        "client",
        "server"
})
@XmlRootElement(name = "Application")
public class Application implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2 {

    @XmlElement(name = "Name", required = true)
    protected String name;
    @XmlElement(name = "Version")
    protected String version;
    @XmlElement(name = "Description")
    protected String description;
    @XmlElement(name = "Url")
    @XmlSchemaType(name = "anyURI")
    protected String url;
    @XmlElement(name = "Organization")
    protected String organization;
    @XmlElement(name = "Licenses")
    protected Licenses licenses;
    @XmlElement(name = "Properties")
    protected Properties properties;
    @XmlElement(name = "Tools")
    protected Tools tools;
    @XmlElement(name = "Client")
    protected Client client;
    @XmlElement(name = "Server")
    protected Server server;

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#append(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#appendFields(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theName;
            theName = getName();
            strategy.appendField(locator, this, "name", buffer, theName, name != null);
        }
        {
            String theVersion;
            theVersion = getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion, version != null);
        }
        {
            String theDescription;
            theDescription = getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription, description != null);
        }
        {
            String theUrl;
            theUrl = getUrl();
            strategy.appendField(locator, this, "url", buffer, theUrl, url != null);
        }
        {
            String theOrganization;
            theOrganization = getOrganization();
            strategy.appendField(locator, this, "organization", buffer, theOrganization, organization != null);
        }
        {
            Licenses theLicenses;
            theLicenses = getLicenses();
            strategy.appendField(locator, this, "licenses", buffer, theLicenses, licenses != null);
        }
        {
            Properties theProperties;
            theProperties = getProperties();
            strategy.appendField(locator, this, "properties", buffer, theProperties, properties != null);
        }
        {
            Tools theTools;
            theTools = getTools();
            strategy.appendField(locator, this, "tools", buffer, theTools, tools != null);
        }
        {
            Client theClient;
            theClient = getClient();
            strategy.appendField(locator, this, "client", buffer, theClient, client != null);
        }
        {
            Server theServer;
            theServer = getServer();
            strategy.appendField(locator, this, "server", buffer, theServer, server != null);
        }
        return buffer;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    @Override
    public Object clone() {
        return copyTo(createNewInstance());
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(java.lang.Object)
     */
    @Override
    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.CopyStrategy2)
     */
    @Override
    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = target == null ? createNewInstance() : target;
        if (draftCopy instanceof Application) {
            final Application copy = (Application) draftCopy;
            {
                final Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, name != null);
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceName;
                    sourceName = getName();
                    final String copyName = (String) strategy.copy(LocatorUtils.property(locator, "name", sourceName),
                            sourceName,
                            name != null);
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                final Boolean versionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, version != null);
                if (versionShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceVersion;
                    sourceVersion = getVersion();
                    final String copyVersion = (String) strategy.copy(
                            LocatorUtils.property(locator, "version", sourceVersion),
                            sourceVersion,
                            version != null);
                    copy.setVersion(copyVersion);
                } else {
                    if (versionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.version = null;
                    }
                }
            }
            {
                final Boolean descriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator,
                        description != null);
                if (descriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceDescription;
                    sourceDescription = getDescription();
                    final String copyDescription = (String) strategy.copy(
                            LocatorUtils.property(locator, "description", sourceDescription),
                            sourceDescription,
                            description != null);
                    copy.setDescription(copyDescription);
                } else {
                    if (descriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.description = null;
                    }
                }
            }
            {
                final Boolean urlShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, url != null);
                if (urlShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceUrl;
                    sourceUrl = getUrl();
                    final String copyUrl = (String) strategy.copy(LocatorUtils.property(locator, "url", sourceUrl),
                            sourceUrl,
                            url != null);
                    copy.setUrl(copyUrl);
                } else {
                    if (urlShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.url = null;
                    }
                }
            }
            {
                final Boolean organizationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator,
                        organization != null);
                if (organizationShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceOrganization;
                    sourceOrganization = getOrganization();
                    final String copyOrganization = (String) strategy.copy(
                            LocatorUtils.property(locator, "organization", sourceOrganization),
                            sourceOrganization,
                            organization != null);
                    copy.setOrganization(copyOrganization);
                } else {
                    if (organizationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.organization = null;
                    }
                }
            }
            {
                final Boolean licensesShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, licenses != null);
                if (licensesShouldBeCopiedAndSet == Boolean.TRUE) {
                    Licenses sourceLicenses;
                    sourceLicenses = getLicenses();
                    final Licenses copyLicenses = (Licenses) strategy.copy(
                            LocatorUtils.property(locator, "licenses", sourceLicenses),
                            sourceLicenses,
                            licenses != null);
                    copy.setLicenses(copyLicenses);
                } else {
                    if (licensesShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.licenses = null;
                    }
                }
            }
            {
                final Boolean propertiesShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator,
                        properties != null);
                if (propertiesShouldBeCopiedAndSet == Boolean.TRUE) {
                    Properties sourceProperties;
                    sourceProperties = getProperties();
                    final Properties copyProperties = (Properties) strategy.copy(
                            LocatorUtils.property(locator, "properties", sourceProperties),
                            sourceProperties,
                            properties != null);
                    copy.setProperties(copyProperties);
                } else {
                    if (propertiesShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.properties = null;
                    }
                }
            }
            {
                final Boolean toolsShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, tools != null);
                if (toolsShouldBeCopiedAndSet == Boolean.TRUE) {
                    Tools sourceTools;
                    sourceTools = getTools();
                    final Tools copyTools = (Tools) strategy.copy(LocatorUtils.property(locator, "tools", sourceTools),
                            sourceTools,
                            tools != null);
                    copy.setTools(copyTools);
                } else {
                    if (toolsShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.tools = null;
                    }
                }
            }
            {
                final Boolean clientShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, client != null);
                if (clientShouldBeCopiedAndSet == Boolean.TRUE) {
                    Client sourceClient;
                    sourceClient = getClient();
                    final Client copyClient = (Client) strategy.copy(
                            LocatorUtils.property(locator, "client", sourceClient),
                            sourceClient,
                            client != null);
                    copy.setClient(copyClient);
                } else {
                    if (clientShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.client = null;
                    }
                }
            }
            {
                final Boolean serverShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, server != null);
                if (serverShouldBeCopiedAndSet == Boolean.TRUE) {
                    Server sourceServer;
                    sourceServer = getServer();
                    final Server copyServer = (Server) strategy.copy(
                            LocatorUtils.property(locator, "server", sourceServer),
                            sourceServer,
                            server != null);
                    copy.setServer(copyServer);
                } else {
                    if (serverShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.server = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#createNewInstance()
     */
    @Override
    public Object createNewInstance() {
        return new Application();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.Equals2#equals(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.EqualsStrategy2)
     */
    @Override
    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
            EqualsStrategy2 strategy) {
        if (object == null || this.getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Application that = (Application) object;
        {
            String lhsName;
            lhsName = getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName),
                    LocatorUtils.property(thatLocator, "name", rhsName),
                    lhsName,
                    rhsName,
                    name != null,
                    that.name != null)) {
                return false;
            }
        }
        {
            String lhsVersion;
            lhsVersion = getVersion();
            String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion),
                    LocatorUtils.property(thatLocator, "version", rhsVersion),
                    lhsVersion,
                    rhsVersion,
                    version != null,
                    that.version != null)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription),
                    LocatorUtils.property(thatLocator, "description", rhsDescription),
                    lhsDescription,
                    rhsDescription,
                    description != null,
                    that.description != null)) {
                return false;
            }
        }
        {
            String lhsUrl;
            lhsUrl = getUrl();
            String rhsUrl;
            rhsUrl = that.getUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsUrl),
                    LocatorUtils.property(thatLocator, "url", rhsUrl),
                    lhsUrl,
                    rhsUrl,
                    url != null,
                    that.url != null)) {
                return false;
            }
        }
        {
            String lhsOrganization;
            lhsOrganization = getOrganization();
            String rhsOrganization;
            rhsOrganization = that.getOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organization", lhsOrganization),
                    LocatorUtils.property(thatLocator, "organization", rhsOrganization),
                    lhsOrganization,
                    rhsOrganization,
                    organization != null,
                    that.organization != null)) {
                return false;
            }
        }
        {
            Licenses lhsLicenses;
            lhsLicenses = getLicenses();
            Licenses rhsLicenses;
            rhsLicenses = that.getLicenses();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "licenses", lhsLicenses),
                    LocatorUtils.property(thatLocator, "licenses", rhsLicenses),
                    lhsLicenses,
                    rhsLicenses,
                    licenses != null,
                    that.licenses != null)) {
                return false;
            }
        }
        {
            Properties lhsProperties;
            lhsProperties = getProperties();
            Properties rhsProperties;
            rhsProperties = that.getProperties();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "properties", lhsProperties),
                    LocatorUtils.property(thatLocator, "properties", rhsProperties),
                    lhsProperties,
                    rhsProperties,
                    properties != null,
                    that.properties != null)) {
                return false;
            }
        }
        {
            Tools lhsTools;
            lhsTools = getTools();
            Tools rhsTools;
            rhsTools = that.getTools();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tools", lhsTools),
                    LocatorUtils.property(thatLocator, "tools", rhsTools),
                    lhsTools,
                    rhsTools,
                    tools != null,
                    that.tools != null)) {
                return false;
            }
        }
        {
            Client lhsClient;
            lhsClient = getClient();
            Client rhsClient;
            rhsClient = that.getClient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "client", lhsClient),
                    LocatorUtils.property(thatLocator, "client", rhsClient),
                    lhsClient,
                    rhsClient,
                    client != null,
                    that.client != null)) {
                return false;
            }
        }
        {
            Server lhsServer;
            lhsServer = getServer();
            Server rhsServer;
            rhsServer = that.getServer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "server", lhsServer),
                    LocatorUtils.property(thatLocator, "server", rhsServer),
                    lhsServer,
                    rhsServer,
                    server != null,
                    that.server != null)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Gets the value of the client property.
     *
     * @return
     *         possible object is
     *         {@link Client }
     */
    public Client getClient() {
        return client;
    }

    /**
     * Gets the value of the description property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the value of the licenses property.
     *
     * @return
     *         possible object is
     *         {@link Licenses }
     */
    public Licenses getLicenses() {
        return licenses;
    }

    /**
     * Gets the value of the name property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the organization property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getOrganization() {
        return organization;
    }

    /**
     * Gets the value of the properties property.
     *
     * @return
     *         possible object is
     *         {@link Properties }
     */
    public Properties getProperties() {
        return properties;
    }

    /**
     * Gets the value of the server property.
     *
     * @return
     *         possible object is
     *         {@link Server }
     */
    public Server getServer() {
        return server;
    }

    /**
     * Gets the value of the tools property.
     *
     * @return
     *         possible object is
     *         {@link Tools }
     */
    public Tools getTools() {
        return tools;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getUrl() {
        return url;
    }

    /**
     * Gets the value of the version property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getVersion() {
        return version;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.HashCode2#hashCode(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.lang.HashCodeStrategy2)
     */
    @Override
    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theName;
            theName = getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName),
                    currentHashCode,
                    theName,
                    name != null);
        }
        {
            String theVersion;
            theVersion = getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion),
                    currentHashCode,
                    theVersion,
                    version != null);
        }
        {
            String theDescription;
            theDescription = getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription),
                    currentHashCode,
                    theDescription,
                    description != null);
        }
        {
            String theUrl;
            theUrl = getUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theUrl),
                    currentHashCode,
                    theUrl,
                    url != null);
        }
        {
            String theOrganization;
            theOrganization = getOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organization", theOrganization),
                    currentHashCode,
                    theOrganization,
                    organization != null);
        }
        {
            Licenses theLicenses;
            theLicenses = getLicenses();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "licenses", theLicenses),
                    currentHashCode,
                    theLicenses,
                    licenses != null);
        }
        {
            Properties theProperties;
            theProperties = getProperties();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "properties", theProperties),
                    currentHashCode,
                    theProperties,
                    properties != null);
        }
        {
            Tools theTools;
            theTools = getTools();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tools", theTools),
                    currentHashCode,
                    theTools,
                    tools != null);
        }
        {
            Client theClient;
            theClient = getClient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "client", theClient),
                    currentHashCode,
                    theClient,
                    client != null);
        }
        {
            Server theServer;
            theServer = getServer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "server", theServer),
                    currentHashCode,
                    theServer,
                    server != null);
        }
        return currentHashCode;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(java.lang.Object, java.lang.Object)
     */
    @Override
    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, java.lang.Object, org.jvnet.jaxb2_commons.lang.MergeStrategy2)
     */
    @Override
    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right,
            MergeStrategy2 strategy) {
        if (right instanceof Application) {
            final Application target = this;
            final Application leftObject = (Application) left;
            final Application rightObject = (Application) right;
            {
                final Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.name != null,
                        rightObject.name != null);
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsName;
                    lhsName = leftObject.getName();
                    String rhsName;
                    rhsName = rightObject.getName();
                    final String mergedName = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "name", lhsName),
                            LocatorUtils.property(rightLocator, "name", rhsName),
                            lhsName,
                            rhsName,
                            leftObject.name != null,
                            rightObject.name != null);
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                final Boolean versionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.version != null,
                        rightObject.version != null);
                if (versionShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsVersion;
                    lhsVersion = leftObject.getVersion();
                    String rhsVersion;
                    rhsVersion = rightObject.getVersion();
                    final String mergedVersion = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "version", lhsVersion),
                            LocatorUtils.property(rightLocator, "version", rhsVersion),
                            lhsVersion,
                            rhsVersion,
                            leftObject.version != null,
                            rightObject.version != null);
                    target.setVersion(mergedVersion);
                } else {
                    if (versionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.version = null;
                    }
                }
            }
            {
                final Boolean descriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.description != null,
                        rightObject.description != null);
                if (descriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsDescription;
                    lhsDescription = leftObject.getDescription();
                    String rhsDescription;
                    rhsDescription = rightObject.getDescription();
                    final String mergedDescription = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "description", lhsDescription),
                            LocatorUtils.property(rightLocator, "description", rhsDescription),
                            lhsDescription,
                            rhsDescription,
                            leftObject.description != null,
                            rightObject.description != null);
                    target.setDescription(mergedDescription);
                } else {
                    if (descriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.description = null;
                    }
                }
            }
            {
                final Boolean urlShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.url != null,
                        rightObject.url != null);
                if (urlShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsUrl;
                    lhsUrl = leftObject.getUrl();
                    String rhsUrl;
                    rhsUrl = rightObject.getUrl();
                    final String mergedUrl = (String) strategy.merge(LocatorUtils.property(leftLocator, "url", lhsUrl),
                            LocatorUtils.property(rightLocator, "url", rhsUrl),
                            lhsUrl,
                            rhsUrl,
                            leftObject.url != null,
                            rightObject.url != null);
                    target.setUrl(mergedUrl);
                } else {
                    if (urlShouldBeMergedAndSet == Boolean.FALSE) {
                        target.url = null;
                    }
                }
            }
            {
                final Boolean organizationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.organization != null,
                        rightObject.organization != null);
                if (organizationShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsOrganization;
                    lhsOrganization = leftObject.getOrganization();
                    String rhsOrganization;
                    rhsOrganization = rightObject.getOrganization();
                    final String mergedOrganization = (String) strategy.merge(
                            LocatorUtils.property(leftLocator, "organization", lhsOrganization),
                            LocatorUtils.property(rightLocator, "organization", rhsOrganization),
                            lhsOrganization,
                            rhsOrganization,
                            leftObject.organization != null,
                            rightObject.organization != null);
                    target.setOrganization(mergedOrganization);
                } else {
                    if (organizationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.organization = null;
                    }
                }
            }
            {
                final Boolean licensesShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.licenses != null,
                        rightObject.licenses != null);
                if (licensesShouldBeMergedAndSet == Boolean.TRUE) {
                    Licenses lhsLicenses;
                    lhsLicenses = leftObject.getLicenses();
                    Licenses rhsLicenses;
                    rhsLicenses = rightObject.getLicenses();
                    final Licenses mergedLicenses = (Licenses) strategy.merge(
                            LocatorUtils.property(leftLocator, "licenses", lhsLicenses),
                            LocatorUtils.property(rightLocator, "licenses", rhsLicenses),
                            lhsLicenses,
                            rhsLicenses,
                            leftObject.licenses != null,
                            rightObject.licenses != null);
                    target.setLicenses(mergedLicenses);
                } else {
                    if (licensesShouldBeMergedAndSet == Boolean.FALSE) {
                        target.licenses = null;
                    }
                }
            }
            {
                final Boolean propertiesShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.properties != null,
                        rightObject.properties != null);
                if (propertiesShouldBeMergedAndSet == Boolean.TRUE) {
                    Properties lhsProperties;
                    lhsProperties = leftObject.getProperties();
                    Properties rhsProperties;
                    rhsProperties = rightObject.getProperties();
                    final Properties mergedProperties = (Properties) strategy.merge(
                            LocatorUtils.property(leftLocator, "properties", lhsProperties),
                            LocatorUtils.property(rightLocator, "properties", rhsProperties),
                            lhsProperties,
                            rhsProperties,
                            leftObject.properties != null,
                            rightObject.properties != null);
                    target.setProperties(mergedProperties);
                } else {
                    if (propertiesShouldBeMergedAndSet == Boolean.FALSE) {
                        target.properties = null;
                    }
                }
            }
            {
                final Boolean toolsShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.tools != null,
                        rightObject.tools != null);
                if (toolsShouldBeMergedAndSet == Boolean.TRUE) {
                    Tools lhsTools;
                    lhsTools = leftObject.getTools();
                    Tools rhsTools;
                    rhsTools = rightObject.getTools();
                    final Tools mergedTools = (Tools) strategy.merge(
                            LocatorUtils.property(leftLocator, "tools", lhsTools),
                            LocatorUtils.property(rightLocator, "tools", rhsTools),
                            lhsTools,
                            rhsTools,
                            leftObject.tools != null,
                            rightObject.tools != null);
                    target.setTools(mergedTools);
                } else {
                    if (toolsShouldBeMergedAndSet == Boolean.FALSE) {
                        target.tools = null;
                    }
                }
            }
            {
                final Boolean clientShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.client != null,
                        rightObject.client != null);
                if (clientShouldBeMergedAndSet == Boolean.TRUE) {
                    Client lhsClient;
                    lhsClient = leftObject.getClient();
                    Client rhsClient;
                    rhsClient = rightObject.getClient();
                    final Client mergedClient = (Client) strategy.merge(
                            LocatorUtils.property(leftLocator, "client", lhsClient),
                            LocatorUtils.property(rightLocator, "client", rhsClient),
                            lhsClient,
                            rhsClient,
                            leftObject.client != null,
                            rightObject.client != null);
                    target.setClient(mergedClient);
                } else {
                    if (clientShouldBeMergedAndSet == Boolean.FALSE) {
                        target.client = null;
                    }
                }
            }
            {
                final Boolean serverShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.server != null,
                        rightObject.server != null);
                if (serverShouldBeMergedAndSet == Boolean.TRUE) {
                    Server lhsServer;
                    lhsServer = leftObject.getServer();
                    Server rhsServer;
                    rhsServer = rightObject.getServer();
                    final Server mergedServer = (Server) strategy.merge(
                            LocatorUtils.property(leftLocator, "server", lhsServer),
                            LocatorUtils.property(rightLocator, "server", rhsServer),
                            lhsServer,
                            rhsServer,
                            leftObject.server != null,
                            rightObject.server != null);
                    target.setServer(mergedServer);
                } else {
                    if (serverShouldBeMergedAndSet == Boolean.FALSE) {
                        target.server = null;
                    }
                }
            }
        }
    }

    /**
     * Sets the value of the client property.
     *
     * @param value
     *            allowed object is
     *            {@link Client }
     */
    public void setClient(Client value) {
        client = value;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setDescription(String value) {
        description = value;
    }

    /**
     * Sets the value of the licenses property.
     *
     * @param value
     *            allowed object is
     *            {@link Licenses }
     */
    public void setLicenses(Licenses value) {
        licenses = value;
    }

    /**
     * Sets the value of the name property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setName(String value) {
        name = value;
    }

    /**
     * Sets the value of the organization property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setOrganization(String value) {
        organization = value;
    }

    /**
     * Sets the value of the properties property.
     *
     * @param value
     *            allowed object is
     *            {@link Properties }
     */
    public void setProperties(Properties value) {
        properties = value;
    }

    /**
     * Sets the value of the server property.
     *
     * @param value
     *            allowed object is
     *            {@link Server }
     */
    public void setServer(Server value) {
        server = value;
    }

    /**
     * Sets the value of the tools property.
     *
     * @param value
     *            allowed object is
     *            {@link Tools }
     */
    public void setTools(Tools value) {
        tools = value;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setUrl(String value) {
        url = value;
    }

    /**
     * Sets the value of the version property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setVersion(String value) {
        version = value;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

}
