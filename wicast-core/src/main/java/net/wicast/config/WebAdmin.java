//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.25 at 10:41:12 PM GMT
//

package net.wicast.config;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Port"/&gt;
 *         &lt;element ref="{http://xml.wicast.net/xml}Url"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "port",
        "url"
})
@XmlRootElement(name = "WebAdmin")
public class WebAdmin implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2 {

    @XmlElement(name = "Port")
    @XmlSchemaType(name = "unsignedShort")
    protected int port;
    @XmlElement(name = "Url", required = true)
    @XmlSchemaType(name = "anyURI")
    protected String url;

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#append(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.ToString2#appendFields(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.StringBuilder, org.jvnet.jaxb2_commons.lang.ToStringStrategy2)
     */
    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            int thePort;
            thePort = getPort();
            strategy.appendField(locator, this, "port", buffer, thePort, true);
        }
        {
            String theUrl;
            theUrl = getUrl();
            strategy.appendField(locator, this, "url", buffer, theUrl, url != null);
        }
        return buffer;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    @Override
    public Object clone() {
        return copyTo(createNewInstance());
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(java.lang.Object)
     */
    @Override
    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#copyTo(org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.CopyStrategy2)
     */
    @Override
    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = target == null ? createNewInstance() : target;
        if (draftCopy instanceof WebAdmin) {
            final WebAdmin copy = (WebAdmin) draftCopy;
            {
                final Boolean portShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                if (portShouldBeCopiedAndSet == Boolean.TRUE) {
                    int sourcePort;
                    sourcePort = getPort();
                    final int copyPort = strategy.copy(LocatorUtils.property(locator, "port", sourcePort),
                            sourcePort,
                            true);
                    copy.setPort(copyPort);
                } else {
                    if (portShouldBeCopiedAndSet == Boolean.FALSE) {
                    }
                }
            }
            {
                final Boolean urlShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, url != null);
                if (urlShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceUrl;
                    sourceUrl = getUrl();
                    final String copyUrl = (String) strategy.copy(LocatorUtils.property(locator, "url", sourceUrl),
                            sourceUrl,
                            url != null);
                    copy.setUrl(copyUrl);
                } else {
                    if (urlShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.url = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.CopyTo2#createNewInstance()
     */
    @Override
    public Object createNewInstance() {
        return new WebAdmin();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.Equals2#equals(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, org.jvnet.jaxb2_commons.lang.EqualsStrategy2)
     */
    @Override
    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
            EqualsStrategy2 strategy) {
        if (object == null || this.getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final WebAdmin that = (WebAdmin) object;
        {
            int lhsPort;
            lhsPort = getPort();
            int rhsPort;
            rhsPort = that.getPort();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "port", lhsPort),
                    LocatorUtils.property(thatLocator, "port", rhsPort),
                    lhsPort,
                    rhsPort,
                    true,
                    true)) {
                return false;
            }
        }
        {
            String lhsUrl;
            lhsUrl = getUrl();
            String rhsUrl;
            rhsUrl = that.getUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsUrl),
                    LocatorUtils.property(thatLocator, "url", rhsUrl),
                    lhsUrl,
                    rhsUrl,
                    url != null,
                    that.url != null)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Gets the value of the port property.
     * @return the port
     */
    public int getPort() {
        return port;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *         possible object is
     *         {@link String }
     */
    public String getUrl() {
        return url;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.HashCode2#hashCode(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.lang.HashCodeStrategy2)
     */
    @Override
    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            int thePort;
            thePort = getPort();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "port", thePort),
                    currentHashCode,
                    thePort,
                    true);
        }
        {
            String theUrl;
            theUrl = getUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theUrl),
                    currentHashCode,
                    theUrl,
                    url != null);
        }
        return currentHashCode;
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(java.lang.Object, java.lang.Object)
     */
    @Override
    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    /* (non-Javadoc)
     * @see org.jvnet.jaxb2_commons.lang.MergeFrom2#mergeFrom(org.jvnet.jaxb2_commons.locator.ObjectLocator, org.jvnet.jaxb2_commons.locator.ObjectLocator, java.lang.Object, java.lang.Object, org.jvnet.jaxb2_commons.lang.MergeStrategy2)
     */
    @Override
    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right,
            MergeStrategy2 strategy) {
        if (right instanceof WebAdmin) {
            final WebAdmin target = this;
            final WebAdmin leftObject = (WebAdmin) left;
            final WebAdmin rightObject = (WebAdmin) right;
            {
                final Boolean portShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        true,
                        true);
                if (portShouldBeMergedAndSet == Boolean.TRUE) {
                    int lhsPort;
                    lhsPort = leftObject.getPort();
                    int rhsPort;
                    rhsPort = rightObject.getPort();
                    final int mergedPort = strategy.merge(LocatorUtils.property(leftLocator, "port", lhsPort),
                            LocatorUtils.property(rightLocator, "port", rhsPort),
                            lhsPort,
                            rhsPort,
                            true,
                            true);
                    target.setPort(mergedPort);
                } else {
                    if (portShouldBeMergedAndSet == Boolean.FALSE) {
                    }
                }
            }
            {
                final Boolean urlShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator,
                        rightLocator,
                        leftObject.url != null,
                        rightObject.url != null);
                if (urlShouldBeMergedAndSet == Boolean.TRUE) {
                    String lhsUrl;
                    lhsUrl = leftObject.getUrl();
                    String rhsUrl;
                    rhsUrl = rightObject.getUrl();
                    final String mergedUrl = (String) strategy.merge(LocatorUtils.property(leftLocator, "url", lhsUrl),
                            LocatorUtils.property(rightLocator, "url", rhsUrl),
                            lhsUrl,
                            rhsUrl,
                            leftObject.url != null,
                            rightObject.url != null);
                    target.setUrl(mergedUrl);
                } else {
                    if (urlShouldBeMergedAndSet == Boolean.FALSE) {
                        target.url = null;
                    }
                }
            }
        }
    }

    /**
     * Sets the value of the port property.
     * @param value the new port
     */
    public void setPort(int value) {
        port = value;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *            allowed object is
     *            {@link String }
     */
    public void setUrl(String value) {
        url = value;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

}
